{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyMaIqFVPpW1eU//g2ySxREz",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/LuanEverton/Projetos-no-Colab/blob/main/Rede%20Neural%20Perceptron\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Criação da rede neural Perpectron"
      ],
      "metadata": {
        "id": "ck-dbA5qMmi6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Pseudocódigo:"
      ],
      "metadata": {
        "id": "T2DWfeVENotP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "de numpy importe np\n",
        "\n",
        "numero_entradas <- [valor_aleatório]\n",
        "bias <- [valor_aleatório]\n",
        "pesos <- [valor_aleatório] #UM PESO ALEATÓRIO PARA CADA ENTRADA\n",
        "taxa_de_aprendizado <- [valor_definido normalmente baixo]\n",
        "numero_de_epocas <- [valor_definido] #QUANTIDADE DE REPETIÇÕES DO TREINAMENTE, MAS PODE SER PARADO ANTES CASO A TAXA DE ERRRO ESTEJA EM UM NIVEL ACEITAVEL.\n",
        "\n",
        "\n",
        "classe Perceptron: #CLASSE PERCEPTRON\n",
        "  funcao init (self, numero_entradas, pesos, bias, taxa_de_aprendizado):\n",
        "\n",
        "    self.pesos <- random.pesos #UTILIZANDO O NUMPY PARA RANDOMIZAR O PESOS\n",
        "    self.bias <- random.bias #UTLIZADNDO O NUMPY PARA RANDOMIZAR OS BIAS\n",
        "    self.taxa_de_aprendizado <- taxa_de_aprendizado #VEM DA VARIAVEL TAXA_DE_APRENDIZADO\n",
        "    self.numero_de_epocas <- numero_de_epocas #VEM DA VIRIAVEL NUMERO_DE_EPOCAS\n",
        "\n",
        "\n",
        "\n",
        "  funcao de Ativação(self, x): #FUNCA DE ATIVAÇAO DO PERCEPTRON\n",
        "\n",
        "    retorne 1 se x >= 0 #RETORNO VERDADEIRO PARA ATIVAR A REDE NEURAL\n",
        "    senão retorne 0 #RETORNO FALSO QUE NÃO ATIVA A REDE NEURAL\n",
        "\n",
        "\n",
        "  funcao de soma ponderada(predicao)(self, numero_entradas): #FUNCAO RECEBE A QUANTIDADE DE ENTRADAS\n",
        "\n",
        "    soma_pesos <- np.dot(numero_entradas, self.pesos) + self.bias #SOMA_PESOS RECEBE A SOMA DO NUMERO DE ENTRADAS VEZES O NUMERO ALEATORIO DE PESOS MAIS NUMERO ALEATORIO DE BIAS\n",
        "    retorna funcao de_Ativação(soma_pesos) #ESSA FUNÇÃO RETORNA A FUNÇÃO DE ATIVAÇÃO FAZENDO A CONDICIONAL.\n",
        "\n",
        "  funcao de treinamento(self, entradas_de_treinamento, saidas_esperadas ): #FUNÇÃO QUE IRA TREINAR O PERCEPTRON\n",
        "\n",
        "    para cada epoca em numero_de_epocas: #REPETIÇÃO\n",
        "\n",
        "      Para cada entradas_de_treinamento, saida_esperada em zip(entradas_de_treinamento, saidas_esperadas): #REPETIÇÃO COM OS PARAMETROS\n",
        "\n",
        "      predicao <- funcao de predicao(entradas_de_treinamento) #VARIAVEL PREDIÇAO RECEBENDO A FUNCAO DE SOMA PONDERADA COM AS ENTRADAS DE TREINAMENTO\n",
        "      erro <- saidas_esperadas - predicao #VARIVEL ERRO USADA PARA PARAR O TREINAMENTO CASO O ERRO SEJA ACEITAVEL\n",
        "      self.pesos <- self.pesos + self.taxa_de_aprendizado * np.dot(entradas_de_treinamento.T, erro)\n",
        "\n",
        "\n",
        "\n",
        ""
      ],
      "metadata": {
        "id": "kH8QspTXvNav"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "entradas = np.random.rand(3,3)\n",
        "pesos = np.random.rand(3)\n",
        "bias = np.random.rand(1)\n",
        "taxa_de_aprendizado = input('Digite a taxa de aprendizado: ')\n",
        "numero_de_epocas = input('Digite o numero de epocas: ')\n",
        "\n",
        "print(entradas)\n",
        "print(pesos)\n",
        "print(bias)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "keXaXWgONDq3",
        "outputId": "cf2fa2a2-ce35-4b5f-c4a8-952d771eee0e"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Digite a taxa de aprendizado: 0.1\n",
            "Digite o numero de epocas: 100\n",
            "[[0.06578689 0.80278978 0.90863438]\n",
            " [0.28378152 0.82727138 0.65351966]\n",
            " [0.5221039  0.14653142 0.94481484]]\n",
            "[0.47713883 0.12871731 0.27406314]\n",
            "[0.21584655]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "class Perceptron:\n",
        "  def __init__(self, entradas, pesos, bias, taxa_de_aprendizado, numero_de_epocas):\n",
        "    self.pesos = np.random.rand(entradas)\n",
        "    self.entradas = np.random.rand(entradas)\n",
        "    self.bias = np.random.rand(1)\n",
        "    self.taxa_de_aprendizado = taxa_de_aprendizado\n",
        "    self.numero_de_epocas = numero_de_epocas"
      ],
      "metadata": {
        "id": "qQ7_n6GjMp5H"
      },
      "execution_count": 6,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def ativacao(self, x):\n",
        "  if x >= 0:\n",
        "    return 1\n",
        "  else:\n",
        "    return 0"
      ],
      "metadata": {
        "id": "PjcaSYpBP72I"
      },
      "execution_count": 8,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def soma_ponderada(self, entradas):\n",
        "  soma_pesos = np.dot(entradas, self.pesos) + self.bias\n",
        "  return ativacao(soma_pesos)"
      ],
      "metadata": {
        "id": "D8-d9t5UQuGa"
      },
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def treinamento(self, entradas_de_treinamento, saidas_esperadas):\n",
        "  for _ in range(self.epocas):\n",
        "    for entradas, saida_esperada in zip(entradas_de_treinamento, saidas_esperadas):\n",
        "      predicao = soma_ponderada(entradas)\n",
        "      erro = saida_esperada - predicao\n",
        "      self.pesos += self.taxa_de_aprendizado * erro * entradas"
      ],
      "metadata": {
        "id": "9m5vJH1gSXL4"
      },
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "Dl2NMZqzNLmP"
      }
    }
  ]
}